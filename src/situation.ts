import {
  零,
  一,
  二,
  三,
  四,
  五,
  六,
  七,
  八,
  九,
  十,
  十一,
  十二,
  十三,
  十四,
  相等,
  减一,
  加一
} from './integer'
import { 空, 不可能, 是 } from './utils'
import { 棋子 } from './gobang'
import { 棋子纵坐标, 棋子坐标, 棋子横坐标 } from './position'

export type 单元格内容参数 = 棋子 | 空

// 链表的形式
export type 棋局单元 = {
  内容: 单元格内容参数
  下一个: 棋局单元 | 空
}

export type 构造棋局单元<内容参数, 下一个> = 内容参数 extends 单元格内容参数
  ? 下一个 extends 棋局单元 | 空
    ? {
        内容: 内容参数
        下一个: 下一个
      }
    : 不可能
  : 不可能

export type 棋局行 = {
  内容: 棋局单元
  下一行: 棋局行 | 空
}

export type 行内容参数 = [
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数,
  单元格内容参数
]

export type 棋局内容参数 = [
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数,
  行内容参数
]

// 这里应该是可以递归解决的
type 构造棋局行<内容参数, 下一行> = 内容参数 extends 行内容参数
  ? 下一行 extends 棋局行 | 空
    ? 内容参数 extends [
        infer 第零格,
        infer 第一格,
        infer 第二格,
        infer 第三格,
        infer 第四格,
        infer 第五格,
        infer 第六格,
        infer 第七格,
        infer 第八格,
        infer 第九格,
        infer 第十格,
        infer 第十一格,
        infer 第十二格,
        infer 第十三格,
        infer 第十四格
      ]
      ? {
          内容: 构造棋局单元<
            第零格,
            构造棋局单元<
              第一格,
              构造棋局单元<
                第二格,
                构造棋局单元<
                  第三格,
                  构造棋局单元<
                    第四格,
                    构造棋局单元<
                      第五格,
                      构造棋局单元<
                        第六格,
                        构造棋局单元<
                          第七格,
                          构造棋局单元<
                            第八格,
                            构造棋局单元<
                              第九格,
                              构造棋局单元<
                                第十格,
                                构造棋局单元<
                                  第十一格,
                                  构造棋局单元<
                                    第十二格,
                                    构造棋局单元<
                                      第十三格,
                                      构造棋局单元<第十四格, 空>
                                    >
                                  >
                                >
                              >
                            >
                          >
                        >
                      >
                    >
                  >
                >
              >
            >
          >
          下一行: 下一行
        }
      : 不可能
    : 不可能
  : 不可能

export type 棋局 = {
  内容: 棋局行
}

export type 构造棋局<内容 extends 棋局内容参数 = 棋局内容参数> = 内容 extends [
  infer 第零行,
  infer 第一行,
  infer 第二行,
  infer 第三行,
  infer 第四行,
  infer 第五行,
  infer 第六行,
  infer 第七行,
  infer 第八行,
  infer 第九行,
  infer 第十行,
  infer 第十一行,
  infer 第十二行,
  infer 第十三行,
  infer 第十四行
]
  ? {
      内容: 构造棋局行<
        第零行,
        构造棋局行<
          第一行,
          构造棋局行<
            第二行,
            构造棋局行<
              第三行,
              构造棋局行<
                第四行,
                构造棋局行<
                  第五行,
                  构造棋局行<
                    第六行,
                    构造棋局行<
                      第七行,
                      构造棋局行<
                        第八行,
                        构造棋局行<
                          第九行,
                          构造棋局行<
                            第十行,
                            构造棋局行<
                              第十一行,
                              构造棋局行<
                                第十二行,
                                构造棋局行<第十三行, 构造棋局行<第十四行, 空>>
                              >
                            >
                          >
                        >
                      >
                    >
                  >
                >
              >
            >
          >
        >
      >
    }
  : 不可能

type 根据链表获取棋局指定行<
  行链表 extends 棋局行 | 空,
  行号 extends 棋子纵坐标
> = 行链表 extends 棋局行
  ? 是 extends 相等<行号, 零>
    ? 行链表
    : 根据链表获取棋局指定行<行链表['下一行'], 减一<行号>>
  : 不可能

export type 获取棋局指定行<
  某棋局 extends 棋局,
  行号 extends 棋子纵坐标
> = 根据链表获取棋局指定行<某棋局['内容'], 行号>

type 根据链表获取棋局某行的指定单元格<
  单元链表 extends 棋局单元 | 空,
  列号 extends 棋子纵坐标
> = 单元链表 extends 棋局单元
  ? 是 extends 相等<列号, 零>
    ? 单元链表
    : 根据链表获取棋局某行的指定单元格<单元链表['下一个'], 减一<列号>>
  : 不可能

type 获取某行的指定单元格<
  某行 extends 棋局行,
  列号 extends 棋子横坐标
> = 根据链表获取棋局某行的指定单元格<某行['内容'], 列号>

type 获取某个单元内容<某单元 extends 棋局单元> = 某单元['内容']

type 获取棋局某位置的单元<
  某棋局 extends 棋局,
  某位置 extends 棋子坐标
> = 获取某行的指定单元格<获取棋局指定行<某棋局, 某位置['纵']>, 某位置['横']>

export type 获取棋局某位置的棋子<
  某棋局 extends 棋局,
  某位置 extends 棋子坐标
> = 获取某个单元内容<获取棋局某位置的单元<某棋局, 某位置>>
